use ethers::providers::Middleware;
use thiserror::Error;

// Error thrown when the UserOpMiddleware interacts with the bundlers
#[derive(Debug, Clone, Error)]
pub enum UserOpMiddlewareError<M: Middleware> {
    /// Thrown when the internal middleware errors
    #[error("Middleware error: {0}")]
    MiddlewareError(M::Error),
    /// Thrown when the smart contract wallet address has not been set
    #[error("Error occured during smart contract wallet deployment")]
    SmartContractWalletDeploymentError,
    /// Thrown when there's a UserOpBuilderError
    #[error(transparent)]
    UserOpBuilderError(UserOpBuilderError<M>),
    /// Thrown when the Pre-verification gas is not enough
    #[error("Pre-verification gas not enough: calculated: {0}, provided: {1}")]
    PreVerificationGasError(u64, u64),
    /// Thrown when the call gas limit is not enough
    #[error("Call gas limit not enough: calculated: {0}, provided: {1}")]
    CallGasLimitError(u64, u64),
    /// Thrown when the verification gas is not enough
    #[error("Verification gas limit not enough")]
    VerificationGasLimitError,
    /// Unknown error
    #[error("Unknown error")]
    UnknownError,
}
// Error thrown when the UserOpbuilder constructs the UserOperation
#[derive(Error, Clone, Debug)]
pub enum UserOpBuilderError<M: Middleware> {
    /// Thrown when the internal middleware errors
    #[error("Middleware error: {0}")]
    MiddlewareError(M::Error),
    /// Thrown when the smart contract wallet address has not been set
    #[error("Smart contract wallet address has not been set")]
    SmartContractWalletAddressNotSet,
    /// Thrown when the smart contract wallet address has been generated by the sender
    #[error("Smart contract wallet has been deployed for the given counter-factual address")]
    SmartContractWalletHasBeenDeployed,
    /// Thrown when the smart contract wallet address has not been deployed
    #[error("Smart contract wallet has not been deployed for the given address. Cannot perform the current function call")]
    SmartContractWalletHasNotBeenDeployed,
    /// Thrown when the [UserOperation](silius_primitives::UserOperation) has missing fields
    #[error("The field {0} in the UserOperation is not set. Call the set_uo_{0} function to set")]
    MissingUserOperationField(String),
    /// Unknown error
    #[error("Unknown error")]
    UnknownError,
}
